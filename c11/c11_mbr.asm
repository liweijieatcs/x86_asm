	;代码清单11-1
	;文件名：c11_mbr.asm
	;文件说明：硬盘主引导扇区代码 
	;创建日期：2011-5-16 19:54

	;设置堆栈段和栈指针 
	mov ax,cs      
	mov ss,ax			   ;设置ss的地址和cs地址相同，但是具体是多少呢？初始化的时候是0
	mov sp,0x7c00				;设置堆栈指针0x7c00

	;计算GDT所在的逻辑段地址，然后求出GDT所在的段首地址以及段内偏移 
	mov ax,[cs:gdt_base+0x7c00]        ;低16位，
	mov dx,[cs:gdt_base+0x7c00+0x02]   ;高16位
	;mov ax, 0x7e00			;段基地址
	;mov dx, 0x0000			;段内偏移
	mov bx,16        
	div bx            
	mov ds,ax                          ;令DS指向该段以进行操作
	mov bx,dx                          ;段内起始偏移地址 

	;创建0#描述符，它是空描述符，这是处理器的要求
	mov dword [bx+0x00],0x00	;因为偏移地址放在bx中，就以bx为基准地址，写入GDT描述符表的第0项目
	mov dword [bx+0x04],0x00  	;段描述符是64位，

	;创建#1描述符，保护模式下的代码段描述符，进入保护模式后，从该段执行，从7C00开始
	mov dword [bx+0x08],0x7c0001ff   ;低32位，线性基地址0x00007c00  
	mov dword [bx+0x0c],0x00409800   ;高32位
	;|----------------------------------------------------------------------------|
	;|                |  |  |  |   |  LIMIT |  |     |  |        |                |
	;|    BASE:31-24  |G |DB|L |AVL| 19--16 |P |DPL  |S |  TYPE  |    BASE:23-16  |
	;|----------------|--|--|--|---|--------|--|-----|--|--------|----------------|
	;|    31--24      |23|22|21|20 | 19--16 |15|14-13|12|  11-8  |      7--0      |
	;|----------------|--|--|--|---|--------|--|-----|--|--------|----------------|
	;|    00000000    |0 |1 |0 |0  |  0000  |1 |  00 |1 |  1000  |    00000000    |
	;|--------------------------------------|-------------------------------------|
	;|           0040                       |              9800                   |
	
	;|--------------------------------------|-------------------------------------|
	;|       SEGMENT BASE 15-0              |          SEGMENT limit 15-0         |
	;|--------------------------------------|-------------------------------------|
	;|           7C00                       |              01FF                   |
	;|--------------------------------------|-------------------------------------|

	;基地址0X7C00
	;G(Granularity:粒度):0 粒度为字节，1 粒度为4K字节，段界限用20位来表示，这样段的扩展范围从4K到4k*1M=4G
	;段界限为0xFF * 1字节 = 512字节
	;P(Segment Present:段存在):1 表明段是否存在，一般是在内存中，如果内存紧张放到了硬盘中，该位要置0
	;S(Descriptor Type:段类型):1 表明是个数据段或者代码段，为0表示是个系统段
	;TYPE(描述符的类型)XEWA 表明代码段可执行
	
	;创建#2描述符，保护模式下的数据段描述符（文本模式下的显示缓冲区） 
	;安装数据段 
	mov dword [bx+0x10],0x8000ffff     
	mov dword [bx+0x14],0x0040920b 
	;|----------------------------------------------------------------------------|
	;|                |  |  |  |   |  LIMIT |  |     |  |        |                |
	;|    BASE:31-24  |G |DB|L |AVL| 19--16 |P |DPL  |S |  TYPE  |    BASE:23-16  |
	;|----------------|--|--|--|---|--------|--|-----|--|--------|----------------|
	;|    31--24      |23|22|21|20 | 19--16 |15|14-13|12|  11-8  |      7--0      |
	;|----------------|--|--|--|---|--------|--|-----|--|--------|----------------|
	;|    00000000    |0 |1 |0 |0  |  0000  |1 |  00 |1 |  0010  |    00001011    |
	;|--------------------------------------|-------------------------------------|
	;|           0040                       |              0920b                  |
	
	;|--------------------------------------|-------------------------------------|
	;|       SEGMENT BASE 15-0              |          SEGMENT limit 15-0         |
	;|--------------------------------------|-------------------------------------|
	;|           8000                       |              FFFF                   |
	;|--------------------------------------|-------------------------------------|

	;创建#3描述符，保护模式下的堆栈段描述符
	mov dword [bx+0x18],0x00007a00
	mov dword [bx+0x1c],0x00409600
	;|----------------------------------------------------------------------------|
	;|                |  |  |  |   |  LIMIT |  |     |  |        |                |
	;|    BASE:31-24  |G |DB|L |AVL| 19--16 |P |DPL  |S |  TYPE  |    BASE:23-16  |
	;|----------------|--|--|--|---|--------|--|-----|--|--------|----------------|
	;|    31--24      |23|22|21|20 | 19--16 |15|14-13|12|  11-8  |      7--0      |
	;|----------------|--|--|--|---|--------|--|-----|--|--------|----------------|
	;|    00000000    |0 |1 |0 |0  |  0000  |1 |  00 |1 |  0110  |    00000000    |
	;|--------------------------------------|-------------------------------------|
	;|           0040                       |              09600                  |
	
	;|--------------------------------------|-------------------------------------|
	;|       SEGMENT BASE 15-0              |          SEGMENT limit 15-0         |
	;|--------------------------------------|-------------------------------------|
	;|           0000                       |              7a00                   |
	;|--------------------------------------|-------------------------------------|


	;初始化描述符表寄存器GDTR
	;包括空描述符，一共4个描述符，占32字节，GDT的界限值是总字节减去1
	mov word [cs:gdt_size+0x7c00],31  ;描述符表的界限（总字节数减一）   

	;加载GDT
	lgdt [cs: gdt_size+0x7c00]

	;打开A20地址线，从0x92端口读出值，然后置位，然后写入0x92端口
	in al,0x92                         ;南桥芯片内的端口 
	or al,0000_0010B
	out 0x92,al                        ;打开A20

	cli                                ;保护模式下中断机制尚未建立，应 
	                            	   ;禁止中断 

	;读出cr0寄存器，然后置位PE位，再写入cr0寄存器，
	mov eax,cr0
	or eax,1
	mov cr0,eax                        ;设置PE位

	;以下进入保护模式... ...
	;表示要跳转到那个段执行，需要跳转到第一个段执行，索引号为1
	;将段描述符加载到cs寄存器
	
	jmp dword 0x0008:flush             ;16位的描述符选择子：32位偏移
	                                   ;清流水线并串行化处理器 
	;|    描述符索引               |TI |  DPL |
	;|------------------------|---|------|
	;|       15--3            | 2 | 1--0 |
	;|------------------------|---|------|
	;|      0000 0000 0000 1  | 0 |  00  |
	;|------------------------|---|------|
	;|             0008                  |
	
	[bits 32] 		           ;以下是32位程序
flush:
	mov cx,00000000000_10_000B        ;加载数据段选择子(0x10) 索引号为2
	mov ds,cx

	;以下在屏幕上显示"Protect mode OK." 
	mov byte [0x00 + 160*8],'P'  
	mov byte [0x02 + 160*8],'r'
	mov byte [0x04 + 160*8],'o'
	mov byte [0x06 + 160*8],'t'
	mov byte [0x08 + 160*8],'e'
	mov byte [0x0a + 160*8],'c'
	mov byte [0x0c + 160*8],'t'
	mov byte [0x0e + 160*8],' '
	mov byte [0x10 + 160*8],'m'
	mov byte [0x12 + 160*8],'o'
	mov byte [0x14 + 160*8],'d'
	mov byte [0x16 + 160*8],'e'
	mov byte [0x18 + 160*8],' '
	mov byte [0x1a + 160*8],'O'
	mov byte [0x1c + 160*8],'K'

	;以下用简单的示例来帮助阐述32位保护模式下的堆栈操作 
	mov cx,00000000000_11_000B         ;加载堆栈段选择子 索引号为3
	mov ss,cx
	mov esp,0x7c00

	mov ebp,esp                        ;保存堆栈指针,用于后续的判断 
	push byte '!'                      ;压入立即数（字节），esp自动减4，将esp保存在ebp中

	sub ebp,4
	cmp ebp,esp                        ;判断压入立即数时，ESP是否减4 
	jnz ghalt                          
	pop eax
	mov [0x1e + 160*8],al              ;显示句点 
      
  ghalt:     
 	hlt                                ;已经禁止中断，将不会被唤醒 

;-------------------------------------------------------------------------------
     
	gdt_size         dw 0
	gdt_base         dd 0x00007e00     ;GDT的物理地址 
	             
	times 510-($-$$) db 0
	          db 0x55,0xaa
